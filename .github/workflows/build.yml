name: Rust Lib + WASM Wrapper + Node Build + Deploy to Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Setup Rust
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable

      # Cache Cargo dependencies (registry + git together)
      - name: Cache cargo dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      # Cache Rust target directory for web-emulator crate
      - name: Cache Rust target directory
        uses: actions/cache@v3
        with:
          path: ./web-emulator/target
          key: ${{ runner.os }}-rust-target-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-rust-target-

      # Test the core lib project (assuming it lives in ./m6502)
      - name: Test Rust core lib
        working-directory: ./m6502
        run: cargo test --verbose

      # Add wasm32 target for wrapper build
      - name: Add wasm32 target
        run: rustup target add wasm32-unknown-unknown

      # Build the wrapper crate for wasm32 target
      - name: Build wrapper for wasm32
        working-directory: ./web-emulator
        run: cargo build --target wasm32-unknown-unknown --release

      # Install wasm-bindgen-cli only if missing, then generate bindings
      - name: Generate wasm-bindgen bindings
        working-directory: ./web-emulator
        run: |
          if ! command -v wasm-bindgen &> /dev/null; then
            cargo install wasm-bindgen-cli --version 0.2.100
          fi
          wasm-bindgen --target web \
            --out-dir pkg \
            target/wasm32-unknown-unknown/release/web_emulator.wasm

      # Setup Node.js with caching for node_modules
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web-emulator/package-lock.json

      # Install Node dependencies (no cleanup before, rely on cache)
      - name: Install Node dependencies
        working-directory: ./web-emulator
        run: npm install

      # Build Node project
      - name: Build Node project
        working-directory: ./web-emulator
        run: npm run build

      # Upload build artifacts for deploy job
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: web-emulator-dist
          path: ./web-emulator/dist

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: web-emulator-dist
          path: ./web-emulator/dist

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './web-emulator/dist'

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
